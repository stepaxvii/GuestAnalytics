import asyncio
import logging
from os import getenv

from aiogram import Router, Bot
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from dotenv import load_dotenv

from data.read_data import (
    read_all_restaurant_data,
    read_rest_month_insight_list
)
from utils.date import month_dict
from utils.message_text import star_for_report
from utils.monthly_report_tg import (
    avg_rest_rating,
    calculate_nps,
    calculate_satisfaction_level,
    count_reviews_by_rating,
    get_count_reviews,
    get_previous_month
)
load_dotenv()

router = Router()

ADMIN_ID = int(getenv('ADMIN_ID'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger()


async def check_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id == ADMIN_ID


@router.callback_query(lambda c: c.data == 'test_report')
async def test_report(callback_query: CallbackQuery, bot: Bot):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""

    if await check_admin(callback_query.from_user.id):
        await callback_query.answer(
            text="–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç–Ω—ã–π –º–µ—Å—è—Ü
        report_date = get_previous_month()
        year, month = report_date.split('-')
        month_name = month_dict.get(month, "–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü")
        report_date = f"{month_name} {year}"

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
        restaurants = read_all_restaurant_data()
        for restaurant in restaurants:
            rest_id = restaurant['id']
            rest_wp_id = restaurant['wp_id']
            rest_title = restaurant['title']
            rest_address = restaurant['address']
            rest_tg_channal = -1002453477756
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ dashboard
            dashoard_link = (
                "https://guestanalytics.ru/"
                f"my-account/?dashboard={rest_wp_id}"
            )
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            total, twogis, yandex = get_count_reviews(restaurant_id=rest_id)

            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            avg_total, avg_twogis, avg_yandex = avg_rest_rating(
                restaurant_id=rest_id
            )

            # –õ–æ—è–ª—å–Ω–æ—Å—Ç—å –≥–æ—Å—Ç–µ–π
            overall_nps, twogis_nps, yandex_nps = calculate_nps(
                restaurant_id=rest_id
            )

            # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–π
            (
                overall_satisfaction,
                twogis_satisfaction,
                yandex_satisfaction
            ) = calculate_satisfaction_level(restaurant_id=rest_id)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã
            insights = read_rest_month_insight_list(restaurant_id=rest_id)
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            rating_count = count_reviews_by_rating(restaurant_id=rest_id)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º (—Ä–µ–π—Ç–∏–Ω–≥–∞–º) –æ—Ç 1 –¥–æ 5
            sorted_ratings = sorted(rating_count.items(), reverse=True)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å–∞–π—Ç–∞—Ö
            insights_text = ""
            for insight in insights:
                insights_text += f"- {insight}"
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            rating_text = ""
            for rating, count in sorted_ratings:
                rating_text += f"{star_for_report(rating)} - {count}\n"

            logger.info(f"–û—Ç—á—ë—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {rest_title} –≥–æ—Ç–æ–≤!")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            message = (
                f"üìà–û—Ç—á—ë—Ç –∑–∞ {report_date}\n"
                f"<b>{rest_title}, {rest_address}</b>.\n\n"
                f"üìù <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>: {total}\n"
                f"–Ø–Ω–¥–µ–∫—Å: {yandex}\n"
                f"2–ì–ò–°: {twogis}\n\n"
                f"üèÜ <b>–ò–Ω–¥–µ–∫—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (NPS)</b>: {overall_nps}%\n"
                f"–Ø–Ω–¥–µ–∫—Å: {yandex_nps}%\n"
                f"2–ì–ò–°: {twogis_nps}%\n\n"
                f"‚≠ê <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</b>: {avg_total}\n"
                f"–Ø–Ω–¥–µ–∫—Å: {avg_yandex}\n"
                f"2–ì–ò–°: {avg_twogis}\n\n"
                f"üòä <b>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞</b>: {overall_satisfaction}%\n"
                f"–Ø–Ω–¥–µ–∫—Å: {yandex_satisfaction}%\n"
                f"2–ì–ò–°: {twogis_satisfaction}%\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            message += (
                f"üìä <b>–û—Ç–∑—ã–≤—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:</b>\n{rating_text}\n"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ—Ç—á—ë—Ç—É –ø–µ—Ä–≤—ã–π –∏–Ω—Å–∞–π—Ç
            message += f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã:\n{insights_text[:300]}..."

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üíª –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", url=dashoard_link
                    )]
                ]
            )

            await callback_query.bot.send_message(
                chat_id=rest_tg_channal,
                text=message,
                reply_markup=keyboard
            )
            logger.info(f"–û—Ç—á—ë—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {rest_title} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            await asyncio.sleep(3)

        logger.info("–¢–µ—Å—Ç –æ—Ç—á—ë—Ç–∞ –∑–∞–≤–µ—Ä—à—ë–Ω)")
